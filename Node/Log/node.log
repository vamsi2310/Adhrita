
> Node@1.0.0 start /home/ubuntu/Backend/Node
> nodemon server.js

[33m[nodemon] 2.0.12[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node server.js`[39m
[2021-10-14T17:05:49.037Z] connected to DB

> Node@1.0.0 start /home/ubuntu/Backend/Node
> nodemon server.js

[33m[nodemon] 2.0.12[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node server.js`[39m
{"level":"info","message":"Testing winston"}
{"level":"info","message":"Testing winston"}
{ message: 'Testing winston',
  level: 'info',
  label: 'right meow!',
  timestamp: '2021-10-14T17:30:06.766Z' }
{ message: 'Testing winston',
  level: 'info',
  label: 'right meow!',
  timestamp: '2021-10-14T17:30:12.705Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:31:25.284Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:32:34.199Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:32:41.135Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:32:44.461Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:32:52.113Z' }
[32m[nodemon] restarting child process[39m
{ message: 'Test call to Backend Server',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:36:04.410Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:42:15.680Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:42:19.798Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:42:32.358Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:43:35.391Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:44:16.953Z' }
{ message: 'test',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:44:20.194Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:44:49.019Z' }
{ message: 'test',
  level: 'info',
  timestamp: '2021-10-14T17:44:53.047Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:45:32.008Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:45:35.509Z' }
{ message: 'request is [object Object]',
  level: 'info',
  timestamp: '2021-10-14T17:45:35.511Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:46:04.306Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:46:08.814Z' }
{ message: 'request is [object Object]',
  level: 'info',
  timestamp: '2021-10-14T17:46:08.816Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:46:18.253Z' }
{ message: 'request is [object Object]',
  level: 'info',
  timestamp: '2021-10-14T17:46:18.256Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:47:00.856Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:47:05.752Z' }
{ message: {},
  level: 'info',
  timestamp: '2021-10-14T17:47:05.754Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:48:56.538Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:49:01.250Z' }
{ level: 'info',
  message: {},
  timestamp: '2021-10-14T17:49:01.252Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:50:20.702Z' }
{ level: 'info',
  message: 'user Already Exists %s',
  timestamp: '2021-10-14T17:50:25.017Z' }
{ level: 'info',
  message: {},
  timestamp: '2021-10-14T17:50:25.019Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:50:50.024Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:51:01.310Z' }
{ level: 'info',
  message: 'user Already Exists %s ',
  timestamp: '2021-10-14T17:51:08.998Z' }
{ level: 'info',
  message: {},
  timestamp: '2021-10-14T17:51:09.001Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:51:48.012Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:51:51.769Z' }
{ name: 'name',
  password: 'password',
  email: 'email',
  mobile: '98098',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:54:08.625Z' }
{ name: 'name',
  password: 'password',
  email: 'email',
  mobile: '98098',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:54:16.578Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:05.621Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:09.191Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:12.402Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:13.646Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:31.339Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:39.389Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:43.917Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:49.077Z' }
{ name: 'name',
  password: 'password',
  email: 'email',
  mobile: '98098',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:54.937Z' }
{ name: 'name',
  password: 'password',
  email: 'email',
  mobile: '98098',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:57:01.102Z' }
{ '{name': 'name,',
  password: 'password,',
  email: 'email,',
  mobile: '98098}',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:57:34.125Z' }
{ '{name': 'name,',
  password: 'password,',
  email: 'email,',
  mobile: '98098}',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:57:39.234Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:58:32.532Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:58:34.105Z' }
{ message: 
   { '{name': 'name,',
     password: 'password,',
     email: 'email,',
     mobile: '98098}' },
  level: 'info',
  timestamp: '2021-10-14T17:58:34.107Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:58:46.914Z' }
{ message: 
   { '{"name"': '"name",',
     password: 'password,',
     email: 'email,',
     mobile: '98098}' },
  level: 'info',
  timestamp: '2021-10-14T17:58:46.916Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:58:54.230Z' }
{ message: 
   { '{"name"': '"name",',
     password: 'password,',
     email: 'email,',
     mobile: '98098}' },
  level: 'info',
  timestamp: '2021-10-14T17:58:54.232Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:59:26.650Z' }
{ message: 
   { '{"name"': '"name2",',
     password: 'password,',
     email: 'email,',
     mobile: '98098}' },
  level: 'info',
  timestamp: '2021-10-14T17:59:26.652Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:59:34.635Z' }
{ message: 
   { '{"name"': '"name2",',
     password: 'password,',
     email: 'email2,',
     mobile: '980982}' },
  level: 'info',
  timestamp: '2021-10-14T17:59:34.637Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:59:58.515Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:00:01.775Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-14T18:00:01.777Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:03:52.527Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:03:56.996Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-14T18:03:56.999Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:08:13.200Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:09:37.520Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-14T18:09:37.521Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:09:46.305Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-14T18:09:46.308Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:10:12.008Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:10:16.904Z' }
{ message: 
   IncomingMessage {
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 5783,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 73,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 73 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 5783,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 73,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 73 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers: 
      { 'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.28.4',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '9309b3c3-c16a-44e5-9ba3-527ebb18debd',
        host: '65.1.59.3:8080',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '76' },
     rawHeaders: 
      [ 'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.28.4',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '9309b3c3-c16a-44e5-9ba3-527ebb18debd',
        'Host',
        '65.1.59.3:8080',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '76' ],
     trailers: {},
     rawTrailers: [],
     upgrade: false,
     url: '/register',
     method: 'POST',
     statusCode: null,
     statusMessage: null,
     client: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 5783,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 73,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 73 },
     _consuming: true,
     _dumped: false,
     next: [Function: next],
     baseUrl: '/api',
     originalUrl: '/api/register',
     _parsedUrl: 
      Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/register',
        path: '/register',
        href: '/register',
        _raw: '/register' },
     params: {},
     query: {},
     res: 
      ServerResponse {
        domain: null,
        _events: { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: bound onceWrapper] listener: [Function: onend] },
                 [Function: bound socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: 
               [ [Function: bound socketOnClose],
                 [Function: onServerResponseClose] ],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: 
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/register',
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/api',
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/register',
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/api',
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _idleTimeout: 120000,
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idleStart: 5783,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: [Circular],
           [Symbol(asyncId)]: 73,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 75,
           [Symbol(triggerAsyncId)]: 73 },
        connection: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: bound onceWrapper] listener: [Function: onend] },
                 [Function: bound socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: 
               [ [Function: bound socketOnClose],
                 [Function: onServerResponseClose] ],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: 
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/register',
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/api',
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/register',
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/api',
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _idleTimeout: 120000,
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idleStart: 5783,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: [Circular],
           [Symbol(asyncId)]: 73,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 75,
           [Symbol(triggerAsyncId)]: 73 },
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: 
         { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
           'content-type': [ 'Content-Type', 'application/json' ] } },
     body: 
      { name: 'name',
        password: 'password',
        email: 'email',
        mobile: '98098' },
     _body: true,
     length: undefined,
     read: [Function],
     route: 
      Route {
        path: '/register',
        stack: 
         [ Layer {
             handle: [Function: urlencodedParser],
             name: 'urlencodedParser',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: { /^\/?$/i fast_star: false, fast_slash: false },
             method: 'post' },
           Layer {
             handle: [Function],
             name: '<anonymous>',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: { /^\/?$/i fast_star: false, fast_slash: false },
             method: 'post' } ],
        methods: { post: true } } },
  level: 'info',
  timestamp: '2021-10-14T18:10:16.905Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:10:43.049Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:10:47.360Z' }
{ message: 'name',
  level: 'info',
  timestamp: '2021-10-14T18:10:47.362Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:14:43.146Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:15:11.408Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T18:15:18.065Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:15:37.860Z' }
{ message: 'name2',
  level: 'info',
  timestamp: '2021-10-14T18:15:37.862Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T19:34:13.682Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T20:03:01.409Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T20:44:13.965Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T20:59:30.584Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T21:05:06.755Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T21:24:31.672Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T21:54:19.116Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T22:58:45.458Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T22:58:46.042Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T00:04:18.339Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T01:40:38.682Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:16:02.245Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:18:16.870Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:18:18.227Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:21:01.316Z' }
{ message: Format { options: {}, Format: [Function: Format] },
  level: 'info',
  timestamp: '2021-10-15T02:35:55.181Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:35:55.188Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-15T02:39:06.305Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:39:06.311Z' }
{ message: {},
  level: 'info',
  timestamp: '2021-10-15T02:44:12.361Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:44:12.368Z' }
{ message: {},
  level: 'info',
  timestamp: '2021-10-15T02:46:24.355Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:46:24.362Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:49:24.356Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:49:27.997Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:01:25.076Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:03:15.593Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:03:55.658Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:07:20.665Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:09:06.612Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-15T03:09:06.615Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:09:37.607Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:09:37.610Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:13:06.577Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:15:05.769Z' }
{ message: 'login succesful',
  level: 'info',
  timestamp: '2021-10-15T03:15:41.477Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:15:41.484Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:19:15.099Z' }
{ level: 'error',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T03:21:13.400Z' }
{ level: 'error',
  label: 'label_test',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T03:21:49.109Z' }
{ level: 'error',
  label: 'label_test',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T06:01:56.310Z' }
{ level: 'error',
  label: 'label_test',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T06:04:07.472Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:06:03.486Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:11:31.394Z' }
{ message: 'name2',
  level: 'info',
  timestamp: '2021-10-15T07:11:31.397Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:14:06.221Z' }
{ level: 'info',
  label: 'signup.js',
  messgae: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message2: 'new user signup requested',
  timestamp: '2021-10-15T07:27:51.872Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:27:52.031Z' }
{ message: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-15T07:27:52.033Z' }
{ level: 'info',
  label: 'signup.js',
  messgae: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message2: 'new user signup requested',
  timestamp: '2021-10-15T07:28:26.258Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:28:26.378Z' }
{ message: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-15T07:28:26.380Z' }
{ level: 'info',
  label: 'signup.js',
  request_body: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup requested',
  timestamp: '2021-10-15T07:29:02.943Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:29:03.101Z' }
{ message: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-15T07:29:03.102Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-15T07:30:44.800Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-15T07:30:44.953Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-15T07:30:58.012Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-15T07:30:58.132Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:34:57.892Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-15T07:35:52.584Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:51:39.894Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-15T07:52:56.687Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-15T07:52:56.844Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:53:49.933Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:54:02.693Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-15T07:56:01.635Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:56:01.759Z' }
{ message: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-15T07:56:01.760Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name3',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-15T07:56:07.372Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-15T07:56:07.501Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name3', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-15T07:56:23.212Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-15T07:56:23.330Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name3',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-15T07:56:40.886Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:57:32.592Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name3', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-15T08:07:53.195Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-16T06:24:24.698Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T06:24:28.998Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name3',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-16T06:24:36.243Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:25:00.440Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:25:00.588Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-16T06:28:49.466Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTMiLCJpYXQiOjE2MzQzNjUzNDEsImV4cCI6MTYzNDM2ODk0MX0.dRUI5qTJwQGcBhxUU6BVOMn29g3RNXgEJVwrFg8iayU' },
  message: 'fetch called',
  timestamp: '2021-10-16T06:28:54.478Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name3',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-16T06:28:54.483Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:29:21.743Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:29:21.891Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: {},
  message: 'fetch called',
  timestamp: '2021-10-16T06:29:22.077Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-16T06:29:54.027Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:29:58.427Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:29:58.583Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   IncomingMessage {
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 34239,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 145,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 146,
        [Symbol(triggerAsyncId)]: 145 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 34239,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 145,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 146,
        [Symbol(triggerAsyncId)]: 145 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: false,
     headers: 
      { host: '65.1.59.3:8080',
        connection: 'keep-alive',
        accept: 'application/json, text/plain, */*',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36',
        'content-type': 'application/json',
        referer: 'http://localhost:4200/',
        'accept-encoding': 'gzip, deflate',
        'accept-language': 'en-US,en;q=0.9',
        'if-none-match': 'W/"14-v59E3M0/gn+o45p7Wvm9vTzg9sc"' },
     rawHeaders: 
      [ 'Host',
        '65.1.59.3:8080',
        'Connection',
        'keep-alive',
        'Accept',
        'application/json, text/plain, */*',
        'User-Agent',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36',
        'Content-Type',
        'application/json',
        'Referer',
        'http://localhost:4200/',
        'Accept-Encoding',
        'gzip, deflate',
        'Accept-Language',
        'en-US,en;q=0.9',
        'If-None-Match',
        'W/"14-v59E3M0/gn+o45p7Wvm9vTzg9sc"' ],
     trailers: {},
     rawTrailers: [],
     upgrade: false,
     url: '/fetch',
     method: 'GET',
     statusCode: null,
     statusMessage: null,
     client: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 34239,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 145,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 146,
        [Symbol(triggerAsyncId)]: 145 },
     _consuming: false,
     _dumped: false,
     next: [Function: next],
     baseUrl: '/profile',
     originalUrl: '/profile/fetch',
     _parsedUrl: 
      Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/fetch',
        path: '/fetch',
        href: '/fetch',
        _raw: '/fetch' },
     params: {},
     query: {},
     res: 
      ServerResponse {
        domain: null,
        _events: { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: bound onceWrapper] listener: [Function: onend] },
                 [Function: bound socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: 
               [ [Function: bound socketOnClose],
                 [Function: onServerResponseClose] ],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: 
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/login',
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/fetch',
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/profile',
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/login',
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/fetch',
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/profile',
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _idleTimeout: 120000,
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idleStart: 34239,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: [Circular],
           [Symbol(asyncId)]: 145,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 146,
           [Symbol(triggerAsyncId)]: 145 },
        connection: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: bound onceWrapper] listener: [Function: onend] },
                 [Function: bound socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: 
               [ [Function: bound socketOnClose],
                 [Function: onServerResponseClose] ],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: 
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/login',
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/fetch',
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/profile',
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/login',
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/fetch',
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/profile',
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _idleTimeout: 120000,
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idleStart: 34239,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: [Circular],
           [Symbol(asyncId)]: 145,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 146,
           [Symbol(triggerAsyncId)]: 145 },
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: 
         { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
           'content-type': [ 'Content-Type', 'application/json' ] } },
     body: {},
     route: 
      Route {
        path: '/fetch',
        stack: 
         [ Layer {
             handle: [Function: urlencodedParser],
             name: 'urlencodedParser',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: { /^\/?$/i fast_star: false, fast_slash: false },
             method: 'get' },
           Layer {
             handle: [Function],
             name: '<anonymous>',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: { /^\/?$/i fast_star: false, fast_slash: false },
             method: 'get' } ],
        methods: { get: true } } },
  message: 'fetch called',
  timestamp: '2021-10-16T06:30:27.267Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   IncomingMessage {
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 81413,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 207,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 208,
        [Symbol(triggerAsyncId)]: 207 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 81413,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 207,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 208,
        [Symbol(triggerAsyncId)]: 207 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers: 
      { 'user-agent': 'PostmanRuntime/7.28.4',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '6e794da3-2bea-4320-91f2-4335b3284f4c',
        host: '65.1.59.3:8080',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-type': 'application/json',
        'content-length': '159' },
     rawHeaders: 
      [ 'User-Agent',
        'PostmanRuntime/7.28.4',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '6e794da3-2bea-4320-91f2-4335b3284f4c',
        'Host',
        '65.1.59.3:8080',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Type',
        'application/json',
        'Content-Length',
        '159' ],
     trailers: {},
     rawTrailers: [],
     upgrade: false,
     url: '/fetch',
     method: 'GET',
     statusCode: null,
     statusMessage: null,
     client: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/login',
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/fetch',
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/profile',
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 81413,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 207,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 208,
        [Symbol(triggerAsyncId)]: 207 },
     _consuming: true,
     _dumped: false,
     next: [Function: next],
     baseUrl: '/profile',
     originalUrl: '/profile/fetch',
     _parsedUrl: 
      Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/fetch',
        path: '/fetch',
        href: '/fetch',
        _raw: '/fetch' },
     params: {},
     query: {},
     res: 
      ServerResponse {
        domain: null,
        _events: { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: bound onceWrapper] listener: [Function: onend] },
                 [Function: bound socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: 
               [ [Function: bound socketOnClose],
                 [Function: onServerResponseClose] ],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: 
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/login',
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/fetch',
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/profile',
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/login',
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/fetch',
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/profile',
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _idleTimeout: 120000,
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idleStart: 81413,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: [Circular],
           [Symbol(asyncId)]: 207,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 208,
           [Symbol(triggerAsyncId)]: 207 },
        connection: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: bound onceWrapper] listener: [Function: onend] },
                 [Function: bound socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: 
               [ [Function: bound socketOnClose],
                 [Function: onServerResponseClose] ],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: 
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/login',
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/fetch',
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/profile',
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/login',
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/fetch',
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/profile',
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _idleTimeout: 120000,
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idleStart: 81413,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: [Circular],
           [Symbol(asyncId)]: 207,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 208,
           [Symbol(triggerAsyncId)]: 207 },
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: 
         { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
           'content-type': [ 'Content-Type', 'application/json' ] } },
     body: 
      { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZSIsImlhdCI6MTYzNDI4MzA1OCwiZXhwIjoxNjM0Mjg2NjU4fQ.QlJ0ZnCzPxSOxOZgxxdhJhqfeGrc-iiRWEPxb1NuECU' },
     _body: true,
     length: undefined,
     read: [Function],
     route: 
      Route {
        path: '/fetch',
        stack: 
         [ Layer {
             handle: [Function: urlencodedParser],
             name: 'urlencodedParser',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: { /^\/?$/i fast_star: false, fast_slash: false },
             method: 'get' },
           Layer {
             handle: [Function],
             name: '<anonymous>',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: { /^\/?$/i fast_star: false, fast_slash: false },
             method: 'get' } ],
        methods: { get: true } } },
  message: 'fetch called',
  timestamp: '2021-10-16T06:31:14.405Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-16T06:31:55.948Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:32:49.449Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:32:49.608Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia3V0dGkiLCJpYXQiOjE2MzQzNjU5NjksImV4cCI6MTYzNDM2OTU2OX0.N1FQdYTetrEWc3RfAyYue6lacmnxC-V_p4q2F6QzgOE' },
  message: 'fetch called',
  timestamp: '2021-10-16T06:34:05.121Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'kutti',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-16T06:34:05.125Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia3V0dGkiLCJpYXQiOjE2MzQzNjU5NjksImV4cCI6MTYzNDM2OTU2OX0.N1FQdYTetrEWc3RfAyYue6lacmnxC-V_p4q2F6QzgOE' },
  message: 'fetch called',
  timestamp: '2021-10-16T06:34:40.939Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'kutti',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-16T06:34:40.941Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:35:14.285Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:35:14.406Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: {},
  message: 'fetch called',
  timestamp: '2021-10-16T06:35:16.985Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:39:58.061Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:39:58.177Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: {},
  message: 'fetch called',
  timestamp: '2021-10-16T06:39:58.356Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:43:26.953Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:43:27.070Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: {},
  message: 'fetch called',
  timestamp: '2021-10-16T06:43:27.278Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-16T06:48:25.579Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTMiLCJpYXQiOjE2MzQzNjUzNDEsImV4cCI6MTYzNDM2ODk0MX0.dRUI5qTJwQGcBhxUU6BVOMn29g3RNXgEJVwrFg8iayU' },
  message: 'fetch called',
  timestamp: '2021-10-16T06:48:38.057Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name3',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-16T06:48:38.062Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:49:02.246Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:49:02.387Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { headers: { normalizedNames: {}, lazyUpdate: null },
     body: 
      { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia3V0dGkiLCJpYXQiOjE2MzQzNjY5NDIsImV4cCI6MTYzNDM3MDU0Mn0.6o2FpqPiJJjqSbeibcbm_jS7yBunScB6K5eK36LzYhY' } },
  message: 'fetch called',
  timestamp: '2021-10-16T06:49:02.581Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:50:11.006Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:50:11.126Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia3V0dGkiLCJpYXQiOjE2MzQzNjcwMTEsImV4cCI6MTYzNDM3MDYxMX0.MnA_eHXSnnH3KcAyAnv2LdjHjlGaEurrslkPRT9s5_s' },
  message: 'fetch called',
  timestamp: '2021-10-16T06:50:11.321Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'kutti',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-16T06:50:11.323Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-16T06:52:19.660Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-16T06:53:24.727Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-16T06:56:18.037Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'kutti', password: '123post' },
  message: 'User Login request',
  timestamp: '2021-10-16T06:57:34.672Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-16T06:57:34.832Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia3V0dGkiLCJpYXQiOjE2MzQzNjc0NTQsImV4cCI6MTYzNDM3MTA1NH0.0PN3V3Outj22aXl1vU68k4ZP6kpICrhlcHef2XEvtNg' },
  message: 'fetch called',
  timestamp: '2021-10-16T06:57:35.018Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'kutti',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-16T06:57:35.022Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T06:58:38.139Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T07:23:13.650Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T07:52:59.142Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T08:07:35.387Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T08:17:03.186Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T09:48:50.556Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T14:48:33.673Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T17:00:49.693Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T17:00:50.837Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T18:10:17.473Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T20:34:59.506Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T20:37:10.654Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T21:32:22.147Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T22:12:45.399Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T22:25:25.078Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-16T22:28:05.560Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-19T16:07:27.080Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-19T16:07:34.134Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name3',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-19T16:07:38.577Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-19T16:07:38.735Z' }
{ message: 
   { name: 'name3',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-19T16:07:38.737Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name4',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-19T16:07:53.832Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-19T16:07:53.966Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Profile updated succesfully !',
  timestamp: '2021-10-19T16:07:53.975Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name4', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-19T16:08:55.032Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-19T16:08:55.153Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTQiLCJpYXQiOjE2MzQ2NTk3MzUsImV4cCI6MTYzNDY2MzMzNX0.p9bYwbxkyB5lMDk9HIXGcPx_3vJ3UKq1rE-ahgBNtWA' },
  message: 'fetch called',
  timestamp: '2021-10-19T16:09:12.718Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name4',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-19T16:09:12.725Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-19T16:10:43.353Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-19T16:13:09.293Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-19T16:18:40.779Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name5',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-19T16:18:47.183Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-19T16:18:47.354Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Profile updated succesfully !',
  timestamp: '2021-10-19T16:18:47.359Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name5', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-19T16:18:57.235Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-19T16:18:57.360Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTUiLCJpYXQiOjE2MzQ2NjAzMzcsImV4cCI6MTYzNDY2MzkzN30.uT7PEJJGUKGdXHjaVehSEwMMAg8jVJrjPhQkgN1OqHk' },
  message: 'fetch called',
  timestamp: '2021-10-19T16:19:08.939Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name5',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-19T16:19:08.945Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTUiLCJpYXQiOjE2MzQ2NjAzMzcsImV4cCI6MTYzNDY2MzkzN30.uT7PEJJGUKGdXHjaVehSEwMMAg8jVJrjPhQkgN1OqHk' },
  message: 'fetch called',
  timestamp: '2021-10-19T16:19:14.250Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name5',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-19T16:19:14.257Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name5',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-19T16:21:07.208Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-19T16:21:07.326Z' }
{ message: 
   { name: 'name5',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-19T16:21:07.328Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name6',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-19T16:21:11.761Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-19T16:21:11.882Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name7',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-19T16:23:34.664Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-19T16:23:34.835Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Profile updated succesfully !',
  timestamp: '2021-10-19T16:23:34.844Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name7', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-19T16:24:00.075Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-19T16:24:00.201Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTciLCJpYXQiOjE2MzQ2NjA2NDAsImV4cCI6MTYzNDY2NDI0MH0.wphIhVdgvd4OLLZ3rt6pPQYFiZJZQu45r09paHoLT40' },
  message: 'fetch called',
  timestamp: '2021-10-19T16:24:12.831Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name7',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-19T16:24:12.835Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTciLCJpYXQiOjE2MzQ2NjA2NDAsImV4cCI6MTYzNDY2NDI0MH0.wphIhVdgvd4OLLZ3rt6pPQYFiZJZQu45r09paHoLT40' },
  message: 'fetch called',
  timestamp: '2021-10-19T16:25:26.705Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name7',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-19T16:25:26.708Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name8',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-19T16:25:38.841Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-19T16:25:38.985Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Profile updated succesfully !',
  timestamp: '2021-10-19T16:25:38.990Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name8', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-19T16:25:44.945Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-19T16:25:45.068Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTgiLCJpYXQiOjE2MzQ2NjA3NDUsImV4cCI6MTYzNDY2NDM0NX0.KIIvlcRwNZdTlkuAaj3c8Ujv5R_WQx01fRTLiI5mOs4' },
  message: 'fetch called',
  timestamp: '2021-10-19T16:25:56.536Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name8',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-19T16:25:56.538Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name8', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-19T17:01:06.409Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-19T17:01:06.569Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name8', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-19T17:36:35.094Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-19T17:36:35.217Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-19T17:40:06.174Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-19T18:18:22.408Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-19T19:04:32.767Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-19T19:25:12.135Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-19T19:25:12.602Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-19T19:37:17.417Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T00:11:54.576Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T01:53:15.503Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T02:46:41.832Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T03:35:33.194Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoia3V0dGkiLCJpYXQiOjE2MzQ2NDM1NTgsImV4cCI6MTYzNDY0NzE1OH0.RKPR2kzZ5betPHZoMaSBokDVz4uQK05G9P9R8EaYoD8' },
  message: 'fetch called',
  timestamp: '2021-10-20T04:08:31.069Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name8', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-20T14:07:57.155Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-20T14:07:57.314Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTgiLCJpYXQiOjE2MzQ3Mzg4NzcsImV4cCI6MTYzNDc0MjQ3N30.G30ZmU-b42jTdqFAI7ue480A26oV3K-P5H0fEy0Oiu0' },
  message: 'fetch called',
  timestamp: '2021-10-20T14:08:30.410Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name8',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-20T14:08:30.412Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTgiLCJpYXQiOjE2MzQ3Mzg4NzcsImV4cCI6MTYzNDc0MjQ3N30.G30ZmU-b42jTdqFAI7ue480A26oV3K-P5H0fEy0Oiu0' },
  message: 'fetch called',
  timestamp: '2021-10-20T14:09:02.294Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name8',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-20T14:09:02.299Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTgiLCJpYXQiOjE2MzQ3Mzg4NzcsImV4cCI6MTYzNDc0MjQ3N30.G30ZmU-b42jTdqFAI7ue480A26oV3K-P5H0fEy0Oiu0' },
  message: 'fetch called',
  timestamp: '2021-10-20T14:24:59.102Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name8',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-20T14:24:59.107Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-20T14:39:58.470Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-20T14:40:49.256Z' }
{ level: 'error',
  label: 'routes/profile.js/update',
  messgae: 
   { CastError: Cast to Buffer failed for value "{ contentType: undefined }" (type Object) at path "file.data"
    at model.Query.exec (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/query.js:4498:21)
    at model.Query.Query.findOneAndUpdate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/query.js:3147:8)
    at Function.Model.findOneAndUpdate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/model.js:2584:13)
    at Profile.findOne.then.profile (/home/ubuntu/Backend/Node/routes/profile.js:96:13)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
     messageFormat: undefined,
     stringValue: '"{ contentType: undefined }"',
     kind: 'Buffer',
     value: { contentType: undefined },
     path: 'file.data',
     reason: null,
     valueType: 'Object' },
  timestamp: '2021-10-20T14:40:54.103Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-20T14:41:48.296Z' }
{ level: 'error',
  label: 'routes/profile.js/update',
  messgae: 
   { CastError: Cast to Buffer failed for value "{ buffer: undefined, contentType: undefined }" (type Object) at path "file.data"
    at model.Query.exec (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/query.js:4498:21)
    at model.Query.Query.findOneAndUpdate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/query.js:3147:8)
    at Function.Model.findOneAndUpdate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/model.js:2584:13)
    at Profile.findOne.then.profile (/home/ubuntu/Backend/Node/routes/profile.js:96:13)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
     messageFormat: undefined,
     stringValue: '"{ buffer: undefined, contentType: undefined }"',
     kind: 'Buffer',
     value: { buffer: undefined, contentType: undefined },
     path: 'file.data',
     reason: null,
     valueType: 'Object' },
  timestamp: '2021-10-20T14:41:53.135Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-20T14:43:50.477Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-20T14:46:52.277Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-20T14:51:44.300Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T15:29:54.996Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T15:42:45.262Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T15:51:34.741Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T16:13:53.038Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T16:13:55.075Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T21:27:48.610Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T21:27:49.264Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T23:02:36.254Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T23:14:10.653Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T23:31:01.282Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-20T23:31:01.708Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-21T00:01:09.694Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-21T00:01:10.108Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-21T00:43:37.843Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-21T01:34:01.608Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-21T02:02:29.786Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-21T02:23:38.332Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:02:21.028Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:09:19.527Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:14:05.840Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:18:09.522Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.584Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.590Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.592Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.598Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.605Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.606Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.610Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.617Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:23:28.619Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:30:12.826Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-27T17:30:13.347Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T16:06:37.923Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T16:06:50.644Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T16:11:13.929Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T16:15:11.001Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T16:36:25.801Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name8', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-28T16:36:51.771Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-28T16:36:51.927Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T16:37:12.647Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T16:37:42.782Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T16:57:16.008Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T16:58:25.190Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:02:47.242Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:02:58.052Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:07:43.401Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:23:52.659Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:24:13.831Z' }
{ level: 'error',
  label: 'routes/gropu/create',
  messgae: ReferenceError: $or is not defined
    at User.findOne.then.userres (/home/ubuntu/Backend/Node/routes/group.js:32:11)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-10-28T17:24:13.857Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:25:06.405Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:26:02.205Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:26:06.949Z' }
{ level: 'error',
  label: 'routes/gropu/create',
  messgae: ReferenceError: gropures is not defined
    at Group.findOne.then.groupres (/home/ubuntu/Backend/Node/routes/group.js:34:6)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-10-28T17:26:06.980Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:26:47.740Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:26:54.038Z' }
{ level: 'error',
  label: 'routes/gropu/create',
  messgae: ReferenceError: gropures is not defined
    at Group.findOne.then.groupres (/home/ubuntu/Backend/Node/routes/group.js:35:6)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-10-28T17:26:54.069Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:31:13.950Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:31:20.413Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is a not group member, creating new group for the user',
  timestamp: '2021-10-28T17:31:20.441Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:33:42.096Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:33:46.019Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is a not group member, creating new group for the user',
  timestamp: '2021-10-28T17:33:46.048Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:34:28.273Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:34:32.668Z' }
{ level: 'error',
  label: 'routes/gropu/create',
  messgae: ReferenceError: gropures is not defined
    at Group.findOne.then.groupres (/home/ubuntu/Backend/Node/routes/group.js:35:6)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-10-28T17:34:32.701Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:34:53.103Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:34:55.991Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-28T17:34:56.021Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:35:55.961Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:36:00.581Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-28T17:36:00.611Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name7', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-28T17:36:29.030Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-28T17:36:29.177Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:36:53.025Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is a not group member, creating new group for the user',
  timestamp: '2021-10-28T17:36:53.033Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:37:01.134Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-28T17:37:01.141Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:37:53.971Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:40:11.922Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name6', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-28T17:40:22.425Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-28T17:40:22.582Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:40:36.295Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is a not group member, creating new group for the user',
  timestamp: '2021-10-28T17:40:36.307Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTgiLCJpYXQiOjE2MzUwODg4ODQsImV4cCI6MTYzNTA5MjQ4NH0.WePzZalFcHzZ0pgtxy1XXK4x9pDfoJAeGZMHGF95DK4' },
  message: 'fetch called',
  timestamp: '2021-10-28T17:40:49.557Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTYiLCJpYXQiOjE2MzU0NDI4MjIsImV4cCI6MTYzNTQ0NjQyMn0.v5WhTJ8g_m0IHG0rVAgmOg-l1hLnyTB2p29TM5h8Ey0' },
  message: 'fetch called',
  timestamp: '2021-10-28T17:40:55.757Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name6',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-28T17:40:55.762Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTYiLCJpYXQiOjE2MzU0NDI4MjIsImV4cCI6MTYzNTQ0NjQyMn0.v5WhTJ8g_m0IHG0rVAgmOg-l1hLnyTB2p29TM5h8Ey0' },
  message: 'fetch called',
  timestamp: '2021-10-28T17:45:44.141Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name6',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-28T17:45:44.142Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:50:15.675Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTYiLCJpYXQiOjE2MzU0NDI4MjIsImV4cCI6MTYzNTQ0NjQyMn0.v5WhTJ8g_m0IHG0rVAgmOg-l1hLnyTB2p29TM5h8Ey0' },
  message: 'fetch called',
  timestamp: '2021-10-28T17:50:20.795Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:51:07.888Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTYiLCJpYXQiOjE2MzU0NDI4MjIsImV4cCI6MTYzNTQ0NjQyMn0.v5WhTJ8g_m0IHG0rVAgmOg-l1hLnyTB2p29TM5h8Ey0' },
  message: 'fetch called',
  timestamp: '2021-10-28T17:51:12.631Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name6',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-28T17:51:12.635Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T17:52:44.057Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:53:07.920Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:53:24.917Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name9',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-28T17:53:33.289Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:53:57.857Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name9',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-28T17:54:02.112Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-28T17:54:02.279Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-28T17:54:11.702Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-28T17:54:11.829Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-28T17:54:25.240Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is a not group member, creating new group for the user',
  timestamp: '2021-10-28T17:54:25.249Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTkiLCJpYXQiOjE2MzU0NDM2NTEsImV4cCI6MTYzNTQ0NzI1MX0.dhrnH6jlTc-Ykcz99jn9Bp_kth6DrZ5ol1ZOsuLcF7c' },
  message: 'fetch called',
  timestamp: '2021-10-28T17:54:34.179Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name9',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-28T17:54:34.181Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-28T17:58:25.310Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T18:15:51.110Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T18:21:27.405Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T19:02:43.529Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T19:37:04.027Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T20:47:21.356Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T22:49:40.605Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T23:50:04.060Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T23:57:03.758Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-28T23:57:04.217Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T01:04:14.126Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T01:52:58.867Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-29T01:53:16.945Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-29T01:53:17.108Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T01:57:44.828Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-29T01:58:15.810Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-29T01:58:15.831Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:00:31.233Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:01:09.609Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:02:50.788Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-29T02:02:55.873Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-29T02:02:55.896Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:06:21.247Z' }
{ level: 'info',
  label: 'routes/group/create',
  messgae: 'token verified, creating new  gropu ',
  timestamp: '2021-10-29T02:06:27.177Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-29T02:06:27.205Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:13:22.106Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:14:29.279Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-29T02:14:32.413Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:15:18.652Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-29T02:15:24.818Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:31:55.762Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name10',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-29T02:35:12.272Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-29T02:35:12.444Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-29T02:35:19.195Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-29T02:35:19.321Z' }
{ level: 'error',
  label: 'routes/gropu/create',
  messgae: ReferenceError: userres is not defined
    at Group.findOne.then.groupres (/home/ubuntu/Backend/Node/routes/group.js:37:15)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-10-29T02:35:33.905Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:36:34.104Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:41:57.800Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:47:35.601Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:48:58.834Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:49:25.764Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-29T02:49:37.346Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T02:52:10.889Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:01:05.736Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:17:41.225Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-29T03:17:54.129Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-29T03:17:54.289Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:18:43.661Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:18:58.686Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:19:20.698Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:19:33.419Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:20:06.048Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:22:30.861Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'prasanth', password: '123' },
  message: 'User Login request',
  timestamp: '2021-10-29T03:47:01.053Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-29T03:47:01.209Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:51:10.196Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:53:06.791Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:57:42.762Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T03:59:05.073Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T04:00:14.213Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'addtoGroup', password: 'y34maoit' },
  message: 'User Login request',
  timestamp: '2021-10-29T04:02:45.162Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-29T04:04:55.009Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T04:30:38.278Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T05:46:52.951Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T06:12:01.835Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T06:20:49.523Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T06:37:57.379Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T07:15:52.706Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T07:51:52.819Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T09:14:29.719Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T09:22:42.219Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T09:40:05.152Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T12:11:20.287Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T12:11:20.742Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T13:08:23.571Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T13:34:01.559Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-29T16:50:36.066Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T02:01:17.363Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'addtoGroup', password: 'y34maoit' },
  message: 'User Login request',
  timestamp: '2021-10-31T02:08:58.804Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T02:12:37.152Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T02:12:37.567Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'user9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-31T02:13:53.877Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-31T02:14:00.189Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-31T02:14:00.340Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T02:14:13.159Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:25:34.092Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:26:22.623Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:27:42.471Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:29:58.536Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:30:38.647Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:31:56.225Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name11',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-31T02:34:33.203Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: { Error: User validation failed: password: Path `password` is required.
    at ValidationError.inspect (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/error/validation.js:48:26)
    at formatValue (util.js:430:38)
    at formatProperty (util.js:831:11)
    at formatObject (util.js:647:17)
    at formatValue (util.js:609:18)
    at inspect (util.js:324:10)
    at Format.module.exports.format [as transform] (/home/ubuntu/Backend/Node/node_modules/logform/pretty-print.js:27:19)
    at Format.info [as transform] (/home/ubuntu/Backend/Node/node_modules/logform/combine.js:20:24)
    at DerivedLogger._transform (/home/ubuntu/Backend/Node/node_modules/winston/lib/winston/logger.js:305:29)
    at DerivedLogger.Transform._read (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js:177:10)
    at DerivedLogger.Transform._write (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js:164:83)
    at doWrite (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:409:139)
    at writeOrBuffer (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:398:5)
    at DerivedLogger.Writable.write (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:307:11)
    at DerivedLogger.log (/home/ubuntu/Backend/Node/node_modules/winston/lib/winston/logger.js:210:12)
    at user.save.then.catch.error (/home/ubuntu/Backend/Node/controllers/AuthController.js:49:23)
     errors: 
      { password: 
         { ValidatorError: Path `password` is required.
    at validate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1270:13)
    at /home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1253:7
    at Array.forEach (<anonymous>)
    at SchemaString.SchemaType.doValidate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1198:14)
    at /home/ubuntu/Backend/Node/node_modules/mongoose/lib/document.js:2567:18
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
           properties: 
            { validator: [Function],
              message: 'Path `password` is required.',
              type: 'required',
              path: 'password',
              value: undefined },
           kind: 'required',
           path: 'password',
           value: undefined,
           reason: undefined,
           [Symbol(mongoose:validatorError)]: true } },
     _message: 'User validation failed' },
  timestamp: '2021-10-31T02:34:33.212Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:34:53.995Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name11',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-31T02:34:55.144Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-31T02:34:55.311Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:35:07.781Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:36:09.899Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name11',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-31T02:36:13.215Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-31T02:36:13.237Z' }
{ message: 
   { name: 'name11',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-31T02:36:13.238Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name12',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-31T02:36:18.245Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: { Error: User validation failed: password: Path `password` is required.
    at ValidationError.inspect (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/error/validation.js:48:26)
    at formatValue (util.js:430:38)
    at formatProperty (util.js:831:11)
    at formatObject (util.js:647:17)
    at formatValue (util.js:609:18)
    at inspect (util.js:324:10)
    at Format.module.exports.format [as transform] (/home/ubuntu/Backend/Node/node_modules/logform/pretty-print.js:27:19)
    at Format.info [as transform] (/home/ubuntu/Backend/Node/node_modules/logform/combine.js:20:24)
    at DerivedLogger._transform (/home/ubuntu/Backend/Node/node_modules/winston/lib/winston/logger.js:305:29)
    at DerivedLogger.Transform._read (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js:177:10)
    at DerivedLogger.Transform._write (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js:164:83)
    at doWrite (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:409:139)
    at writeOrBuffer (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:398:5)
    at DerivedLogger.Writable.write (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:307:11)
    at DerivedLogger.log (/home/ubuntu/Backend/Node/node_modules/winston/lib/winston/logger.js:210:12)
    at user.save.then.catch.error (/home/ubuntu/Backend/Node/controllers/AuthController.js:49:23)
     errors: 
      { password: 
         { ValidatorError: Path `password` is required.
    at validate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1270:13)
    at /home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1253:7
    at Array.forEach (<anonymous>)
    at SchemaString.SchemaType.doValidate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1198:14)
    at /home/ubuntu/Backend/Node/node_modules/mongoose/lib/document.js:2567:18
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
           properties: 
            { validator: [Function],
              message: 'Path `password` is required.',
              type: 'required',
              path: 'password',
              value: undefined },
           kind: 'required',
           path: 'password',
           value: undefined,
           reason: undefined,
           [Symbol(mongoose:validatorError)]: true } },
     _message: 'User validation failed' },
  timestamp: '2021-10-31T02:36:18.258Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:36:46.136Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name12',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-31T02:36:47.633Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: { Error: User validation failed: password: Path `password` is required.
    at ValidationError.inspect (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/error/validation.js:48:26)
    at formatValue (util.js:430:38)
    at formatProperty (util.js:831:11)
    at formatObject (util.js:647:17)
    at formatValue (util.js:609:18)
    at inspect (util.js:324:10)
    at Format.module.exports.format [as transform] (/home/ubuntu/Backend/Node/node_modules/logform/pretty-print.js:27:19)
    at Format.info [as transform] (/home/ubuntu/Backend/Node/node_modules/logform/combine.js:20:24)
    at DerivedLogger._transform (/home/ubuntu/Backend/Node/node_modules/winston/lib/winston/logger.js:305:29)
    at DerivedLogger.Transform._read (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js:177:10)
    at DerivedLogger.Transform._write (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js:164:83)
    at doWrite (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:409:139)
    at writeOrBuffer (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:398:5)
    at DerivedLogger.Writable.write (/home/ubuntu/Backend/Node/node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js:307:11)
    at DerivedLogger.log (/home/ubuntu/Backend/Node/node_modules/winston/lib/winston/logger.js:210:12)
    at user.save.then.catch.error (/home/ubuntu/Backend/Node/controllers/AuthController.js:49:23)
     errors: 
      { password: 
         { ValidatorError: Path `password` is required.
    at validate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1270:13)
    at /home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1253:7
    at Array.forEach (<anonymous>)
    at SchemaString.SchemaType.doValidate (/home/ubuntu/Backend/Node/node_modules/mongoose/lib/schematype.js:1198:14)
    at /home/ubuntu/Backend/Node/node_modules/mongoose/lib/document.js:2567:18
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
           properties: 
            { validator: [Function],
              message: 'Path `password` is required.',
              type: 'required',
              path: 'password',
              value: undefined },
           kind: 'required',
           path: 'password',
           value: undefined,
           reason: undefined,
           [Symbol(mongoose:validatorError)]: true } },
     _message: 'User validation failed' },
  timestamp: '2021-10-31T02:36:47.673Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T02:37:28.736Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:37:40.462Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name12',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-10-31T02:37:42.906Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-10-31T02:37:43.073Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:38:06.932Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:38:28.074Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:38:57.777Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T02:44:00.964Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-31T03:57:48.177Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-31T03:57:48.335Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T03:58:25.105Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T03:58:59.825Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T03:59:08.242Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T04:15:56.530Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T04:16:00.240Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T04:16:05.587Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T04:32:26.375Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-31T04:32:35.077Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-31T04:32:35.233Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T04:32:45.337Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T04:35:58.994Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T04:36:12.677Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T04:36:20.342Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T04:36:26.173Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T04:36:29.143Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T04:38:05.225Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T04:38:26.127Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T04:38:31.466Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:06:33.380Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T05:06:47.537Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T05:07:09.339Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T05:22:02.605Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:36:16.244Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-31T05:36:23.872Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-31T05:36:24.007Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:39:27.553Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:40:55.433Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T05:41:20.098Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T05:42:32.389Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T05:42:38.759Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T05:42:44.138Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T05:43:07.443Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-10-31T05:43:13.082Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:44:15.330Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:45:58.887Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:46:11.937Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:46:24.682Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:47:08.925Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:52:05.649Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T05:54:12.639Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T06:10:38.284Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T06:11:36.293Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T06:13:20.307Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T06:13:45.209Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T06:19:01.668Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T07:17:40.497Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T09:28:18.255Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T09:50:44.268Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T11:49:57.740Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T12:27:02.566Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T13:44:39.340Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T13:44:39.812Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T13:51:41.976Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T15:59:03.450Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T16:16:48.593Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T16:31:28.900Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T16:48:27.428Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-31T16:48:38.273Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-31T16:48:38.430Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T16:48:51.585Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T16:51:09.142Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T16:51:51.405Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T16:53:44.016Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T16:54:35.826Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T16:54:40.476Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T16:55:43.904Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T16:56:11.604Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T16:56:38.360Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:02:15.164Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:04:57.827Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:05:05.479Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:05:21.272Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:08:42.640Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:08:47.506Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:09:01.663Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:09:32.680Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:10:18.808Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:10:31.346Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:11:46.501Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:13:55.469Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:14:06.841Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:14:47.133Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:15:08.868Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:16:20.514Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:16:32.572Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:18:53.557Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:19:01.322Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:19:33.679Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:22:00.612Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:24:03.769Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:24:34.034Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:25:45.223Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:26:15.969Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:27:42.035Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:27:52.262Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:28:17.220Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:28:43.462Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:29:08.045Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T17:30:34.426Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:32:26.469Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:32:31.420Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:33:19.032Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:33:54.485Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:34:08.144Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:34:22.555Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:35:21.088Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:35:51.508Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:38:18.094Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:38:22.702Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:39:25.604Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:40:24.717Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:40:27.828Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:41:40.870Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:42:51.103Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:43:31.695Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:43:48.154Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:46:16.647Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:46:31.765Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:46:39.786Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:47:03.612Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:48:30.070Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-31T17:48:46.468Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-31T17:48:46.593Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:48:59.588Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:51:24.688Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:51:30.976Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:53:13.456Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:53:20.025Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:53:49.100Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:57:18.214Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T17:57:56.982Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:59:03.479Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:59:33.493Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T17:59:58.193Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T18:02:08.504Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T18:03:24.558Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T18:03:44.987Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T18:03:48.024Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T18:07:01.239Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T18:07:37.027Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T18:07:53.085Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T18:09:20.513Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T18:09:22.976Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T18:09:31.320Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-10-31T18:09:36.560Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-31T18:17:13.213Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T20:03:12.223Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T22:00:12.594Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T22:26:09.033Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T22:38:29.442Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T22:52:11.902Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T23:08:16.237Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-31T23:09:33.650Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T01:09:15.474Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T01:49:54.980Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T02:34:10.416Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T02:40:30.712Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T02:40:50.829Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-01T02:41:38.547Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-01T02:41:38.710Z' }
{ level: 'info',
  label: 'routes/gropu/fetch',
  messgae: 'user is in a group already, fetching group details',
  timestamp: '2021-11-01T02:41:48.658Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T02:50:52.194Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T02:53:11.697Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T02:55:56.135Z' }
{ level: 'error',
  label: 'routes/gropu/create',
  messgae: TypeError: Group.findOneById is not a function
    at User.findOne.then.userres (/home/ubuntu/Backend/Node/routes/group.js:28:11)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-11-01T02:56:03.431Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T02:56:51.418Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T02:58:47.827Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:03:00.110Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T03:08:27.719Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T03:08:28.151Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:08:33.349Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:08:42.642Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:14:24.382Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:15:16.830Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:15:50.369Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:16:34.979Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:20:35.288Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:24:07.155Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:25:14.329Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:30:35.461Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:43:10.469Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:43:16.580Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-01T03:43:24.848Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-01T03:43:25.005Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:54:44.556Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T03:58:47.093Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T04:01:21.708Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T04:02:51.452Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-01T04:45:08.368Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-01T04:45:08.524Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T04:45:19.563Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T04:59:17.583Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T04:59:32.491Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:03:38.585Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:03:44.195Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:03:53.127Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:04:30.549Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:05:38.141Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:05:44.658Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:06:25.826Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:06:27.742Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-01T05:07:05.829Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-01T05:07:05.973Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:07:54.540Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:08:08.276Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:10:13.328Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:10:29.164Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:10:35.138Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:13:53.839Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:13:56.796Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:14:52.371Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T05:14:55.095Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:14:56.173Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:15:05.525Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:15:31.436Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:15:32.991Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:16:09.022Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:16:10.627Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:16:20.644Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:16:37.981Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:16:39.659Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:17:29.730Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:17:33.014Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:17:55.575Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:17:58.875Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:18:27.323Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:18:30.346Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:19:01.121Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:19:03.486Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:19:37.312Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:19:39.878Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:19:47.020Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:20:17.102Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:24:52.589Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:24:57.334Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:30:02.132Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:30:06.075Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:30:35.534Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:30:42.923Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:31:20.499Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:31:24.163Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:32:13.597Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:32:42.111Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T05:32:58.447Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:34:44.173Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:35:01.630Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:35:05.626Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:45:54.854Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-01T05:46:01.386Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-01T05:46:01.542Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:46:12.954Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:47:10.763Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:47:12.739Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:47:29.481Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:47:38.116Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:50:37.592Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:50:44.389Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:52:12.501Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:52:17.412Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:52:24.469Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:53:08.762Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:53:10.183Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-01T05:53:16.339Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T05:54:46.834Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-01T05:57:11.887Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T06:56:31.570Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T09:53:31.479Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:14:35.883Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:14:41.673Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:14:47.341Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:14:52.995Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:14:58.659Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:04.788Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:10.444Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:16.101Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:21.756Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:27.424Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:33.099Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:39.642Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:45.299Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-01T13:15:50.946Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T16:27:31.967Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T16:28:11.345Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T16:28:11.504Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T16:38:18.230Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-02T16:38:32.469Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T16:38:52.823Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T16:46:42.928Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-02T16:51:30.598Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:12:05.363Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:12:36.840Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:23:10.741Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:25:08.447Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name9', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T17:32:04.340Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T17:32:04.460Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:32:15.177Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:32:24.958Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:33:30.569Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:36:10.888Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:36:14.939Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:36:18.526Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:37:50.846Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:37:53.119Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:39:35.906Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:39:37.450Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:40:06.580Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name9',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:40:07.594Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:43:49.740Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'user', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T17:43:54.416Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'user8', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T17:43:58.542Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name8', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T17:44:03.016Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T17:44:03.162Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:47:12.892Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:47:35.967Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:49:02.653Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:49:29.418Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T17:52:14.468Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T17:56:45.563Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T17:56:45.705Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T17:57:33.281Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:05:49.726Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:05:57.568Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:06:08.881Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:07:24.942Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:07:29.198Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:07:48.697Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:07:50.663Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:14:22.425Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:14:26.071Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:18:30.799Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:18:34.310Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:19:11.723Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:19:15.042Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:20:55.773Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:20:57.316Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:21:09.983Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:21:56.702Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:21:57.776Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:24:11.028Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:24:12.011Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:24:21.189Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:24:28.684Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:26:44.184Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:26:46.470Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:26:59.664Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:30:03.221Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:33:55.233Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:40:02.799Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:40:13.019Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:40:25.519Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:40:30.943Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:40:33.845Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:40:46.915Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:41:30.752Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:41:33.045Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:41:45.529Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:43:18.024Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:43:19.395Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:43:21.949Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:44:22.428Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:44:27.546Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:44:33.025Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:44:42.973Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:48:01.331Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:49:17.330Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:50:59.042Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:51:52.605Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T18:56:19.854Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T18:56:54.899Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T18:56:55.046Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:57:07.630Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:57:12.490Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:57:26.463Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T18:57:30.810Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T19:00:10.647Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T19:00:24.183Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:01:26.547Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:02:23.682Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:02:28.848Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:04:08.787Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:06:58.601Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:07:17.467Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:08:35.652Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:08:47.910Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:13:04.519Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:14:16.723Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:14:53.466Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:17:13.671Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:17:58.470Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:18:20.568Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:19:15.922Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T19:19:39.427Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:20:43.450Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T19:20:45.080Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T19:20:53.011Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:21:19.497Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T19:21:20.817Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:21:46.568Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T19:21:57.678Z' }
{ level: 'info',
  label: 'routes/group/fetchProfile',
  user: 'name10',
  messgae: 'token verified for owner, fetching member profile',
  timestamp: '2021-11-02T19:21:59.710Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:28:50.849Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:29:15.742Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:30:33.380Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T19:30:33.539Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:42:22.039Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:42:51.345Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:42:59.817Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:43:12.859Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:44:30.519Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:44:35.011Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:46:40.258Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:47:14.777Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:47:39.009Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:47:45.772Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password1' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:47:48.997Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password1' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:48:04.582Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password1' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:48:05.787Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-02T19:48:11.500Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: '' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:49:10.517Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:49:59.682Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:50:49.241Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:51:02.207Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:51:53.780Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:52:17.247Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:52:39.105Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:53:18.652Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password1' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:53:29.401Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T19:53:29.525Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password1' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:54:00.038Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T19:54:00.156Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:57:25.235Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password1' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:57:28.548Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T19:57:28.706Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: '2' },
  message: 'User Login request',
  timestamp: '2021-11-02T19:57:46.346Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T19:57:46.462Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T19:58:03.827Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:01:11.048Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:01:58.600Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:02:10.052Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password2' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:02:27.272Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:02:27.431Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password2' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:02:45.909Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:02:46.027Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:12:09.320Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:12:36.130Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password2' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:12:43.163Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:12:43.321Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:15:14.783Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name10', password: 'password2' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:15:16.190Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:15:16.349Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:16:29.159Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name13',
     password: 'password',
     email: 'email2',
     mobile: '980982',
     deviceId: '1' },
  message: 'new user signup request',
  timestamp: '2021-11-02T20:16:30.862Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-11-02T20:16:31.036Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password2' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:16:38.304Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: ReferenceError: deviceId is not defined
    at User.findOne.then.user (/home/ubuntu/Backend/Node/controllers/AuthController.js:89:28)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-11-02T20:16:38.313Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:18:32.294Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password2' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:18:34.546Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password2', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:18:52.755Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:19:04.941Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:19:05.064Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:19:54.263Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:19:55.968Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:19:56.127Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password', deviceId: 5 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:20:00.029Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'passwor1d', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:20:06.694Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name123', password: 'password', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:20:11.679Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: TypeError: Cannot read property 'deviceId' of null
    at User.findOne.then.user (/home/ubuntu/Backend/Node/controllers/AuthController.js:69:25)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-11-02T20:20:11.683Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:20:50.497Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name123', password: 'password', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:20:51.755Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: TypeError: Cannot read property 'deviceId' of null
    at User.findOne.then.user (/home/ubuntu/Backend/Node/controllers/AuthController.js:69:25)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7),
  timestamp: '2021-11-02T20:20:51.770Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:20:55.326Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:20:55.472Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'passwordi', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:20:58.729Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:21:02.306Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:21:02.424Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password', deviceId: 16 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:21:04.921Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name13', password: 'password', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:21:07.527Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:21:07.646Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:21:13.737Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name14',
     password: 'password',
     email: 'email2',
     mobile: '980982',
     deviceId: '' },
  message: 'new user signup request',
  timestamp: '2021-11-02T20:26:30.684Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-11-02T20:26:30.853Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name14', password: 'password', deviceId: 1 },
  message: 'User Login request',
  timestamp: '2021-11-02T20:26:36.589Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name14', password: 'password', deviceId: '' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:26:46.402Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:26:46.523Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name14', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:26:50.689Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name14', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:26:53.445Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name14', password: 'password', deviceId: '' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:27:07.523Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:27:07.641Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name15',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-11-02T20:27:19.863Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User signup Succesful !',
  timestamp: '2021-11-02T20:27:19.983Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password', deviceId: '' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:27:26.085Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:27:26.203Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:27:30.520Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:27:30.651Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:27:44.109Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:29:30.222Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:29:30.381Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:36:49.563Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:36:49.683Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-02T20:36:52.655Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:37:05.481Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:37:05.597Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:37:56.448Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:37:56.564Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:38:11.491Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:38:12.400Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:38:12.558Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:38:18.023Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:38:18.145Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:38:49.038Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:38:50.922Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:38:51.079Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name15',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-11-02T20:38:55.273Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-11-02T20:38:55.395Z' }
{ message: 
   { name: 'name15',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-11-02T20:38:55.397Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:44:00.535Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:44:52.907Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:44:55.430Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:46:35.430Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:50:20.300Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:51:23.340Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:53:00.388Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:53:04.406Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:53:04.565Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:53:19.011Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:53:30.206Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:53:33.452Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:53:48.240Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:53:49.477Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:53:49.634Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:54:09.556Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name15',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-11-02T20:54:13.975Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-11-02T20:54:14.133Z' }
{ message: 
   { name: 'name15',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-11-02T20:54:14.135Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:54:41.398Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:56:32.935Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T20:56:40.216Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T20:56:40.370Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTE1IiwiaWF0IjoxNjM1ODg2NjAwLCJleHAiOjE2MzU4OTAyMDB9.BWz1Hb4G1j3slLlIk9hCyT-cE6hZm8VQCB4_TKReciU' },
  message: 'fetch called',
  timestamp: '2021-11-02T20:56:53.262Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name15',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-11-02T20:56:53.266Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTE1IiwiaWF0IjoxNjM1ODg2NjAwLCJleHAiOjE2MzU4OTAyMDB9.BWz1Hb4G1j3slLlIk9hCyT-cE6hZm8VQCB4_TKReciU' },
  message: 'fetch called',
  timestamp: '2021-11-02T20:57:08.456Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name15',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-11-02T20:57:08.458Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTE1IiwiaWF0IjoxNjM1ODg2NjAwLCJleHAiOjE2MzU4OTAyMDB9.BWz1Hb4G1j3slLlIk9hCyT-cE6hZm8VQCB4_TKReciU' },
  message: 'fetch called',
  timestamp: '2021-11-02T20:57:29.896Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name15',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-11-02T20:57:29.898Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T20:59:07.356Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:01:04.512Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:01:28.695Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:02:07.828Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:03:10.510Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:03:50.900Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:04:34.416Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:05:14.238Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T21:05:23.812Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T21:05:23.969Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  body: 
   { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibmFtZTE1IiwiaWF0IjoxNjM1ODg2NjAwLCJleHAiOjE2MzU4OTAyMDB9.BWz1Hb4G1j3slLlIk9hCyT-cE6hZm8VQCB4_TKReciU' },
  message: 'fetch called',
  timestamp: '2021-11-02T21:05:35.468Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name15',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-11-02T21:05:35.472Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:07:52.260Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:08:25.165Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:09:04.523Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:09:22.623Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:09:48.462Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:09:57.835Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:12:22.364Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:13:50.027Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:14:22.109Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:15:26.248Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T21:15:29.097Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T21:15:29.252Z' }
{ level: 'info',
  label: 'routes/signup.js/register',
  request_body: 
   { name: 'name15',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup request',
  timestamp: '2021-11-02T21:15:32.719Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-11-02T21:15:32.839Z' }
{ message: 
   { name: 'name15',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-11-02T21:15:32.841Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:16:11.392Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:18:34.792Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:19:18.041Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:19:41.488Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:21:21.489Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:21:32.460Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:22:13.210Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:25:46.363Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:26:13.562Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:26:39.725Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:28:14.370Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:29:44.926Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:30:53.527Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:32:45.563Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:33:48.280Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:34:32.248Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:35:15.886Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:35:28.530Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:38:04.992Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:38:09.852Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:38:32.723Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:41:01.965Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:41:49.925Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:42:16.577Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:42:31.298Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:43:01.717Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:43:22.464Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:44:36.358Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:45:36.068Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:46:56.770Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:48:20.891Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:48:48.741Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:52:22.449Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:54:03.054Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-11-02T21:54:23.386Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name15', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-11-02T21:54:32.142Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-11-02T21:54:32.300Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-02T21:59:14.182Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-02T23:40:34.635Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-02T23:40:35.101Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-03T00:26:05.543Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-11-03T05:05:11.819Z' }
