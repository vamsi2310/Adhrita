
> Node@1.0.0 start /home/ubuntu/Backend/Node
> nodemon server.js

[33m[nodemon] 2.0.12[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node server.js`[39m
[2021-10-14T17:05:49.037Z] connected to DB

> Node@1.0.0 start /home/ubuntu/Backend/Node
> nodemon server.js

[33m[nodemon] 2.0.12[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node server.js`[39m
{"level":"info","message":"Testing winston"}
{"level":"info","message":"Testing winston"}
{ message: 'Testing winston',
  level: 'info',
  label: 'right meow!',
  timestamp: '2021-10-14T17:30:06.766Z' }
{ message: 'Testing winston',
  level: 'info',
  label: 'right meow!',
  timestamp: '2021-10-14T17:30:12.705Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:31:25.284Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:32:34.199Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:32:41.135Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:32:44.461Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:32:52.113Z' }
[32m[nodemon] restarting child process[39m
{ message: 'Test call to Backend Server',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:36:04.410Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:42:15.680Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:42:19.798Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:42:32.358Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:43:35.391Z' }
{ message: 'connected to DB',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:44:16.953Z' }
{ message: 'test',
  level: 'info',
  label: 'server.js',
  timestamp: '2021-10-14T17:44:20.194Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:44:49.019Z' }
{ message: 'test',
  level: 'info',
  timestamp: '2021-10-14T17:44:53.047Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:45:32.008Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:45:35.509Z' }
{ message: 'request is [object Object]',
  level: 'info',
  timestamp: '2021-10-14T17:45:35.511Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:46:04.306Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:46:08.814Z' }
{ message: 'request is [object Object]',
  level: 'info',
  timestamp: '2021-10-14T17:46:08.816Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:46:18.253Z' }
{ message: 'request is [object Object]',
  level: 'info',
  timestamp: '2021-10-14T17:46:18.256Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:47:00.856Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:47:05.752Z' }
{ message: {},
  level: 'info',
  timestamp: '2021-10-14T17:47:05.754Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:48:56.538Z' }
{ message: 'user Already Exists',
  level: 'info',
  timestamp: '2021-10-14T17:49:01.250Z' }
{ level: 'info',
  message: {},
  timestamp: '2021-10-14T17:49:01.252Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:50:20.702Z' }
{ level: 'info',
  message: 'user Already Exists %s',
  timestamp: '2021-10-14T17:50:25.017Z' }
{ level: 'info',
  message: {},
  timestamp: '2021-10-14T17:50:25.019Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:50:50.024Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:51:01.310Z' }
{ level: 'info',
  message: 'user Already Exists %s ',
  timestamp: '2021-10-14T17:51:08.998Z' }
{ level: 'info',
  message: {},
  timestamp: '2021-10-14T17:51:09.001Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:51:48.012Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:51:51.769Z' }
{ name: 'name',
  password: 'password',
  email: 'email',
  mobile: '98098',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:54:08.625Z' }
{ name: 'name',
  password: 'password',
  email: 'email',
  mobile: '98098',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:54:16.578Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:05.621Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:09.191Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:12.402Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:13.646Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:31.339Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:39.389Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:43.917Z' }
{ level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:49.077Z' }
{ name: 'name',
  password: 'password',
  email: 'email',
  mobile: '98098',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:56:54.937Z' }
{ name: 'name',
  password: 'password',
  email: 'email',
  mobile: '98098',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:57:01.102Z' }
{ '{name': 'name,',
  password: 'password,',
  email: 'email,',
  mobile: '98098}',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:57:34.125Z' }
{ '{name': 'name,',
  password: 'password,',
  email: 'email,',
  mobile: '98098}',
  level: 'info',
  message: 'user Already Exists ',
  timestamp: '2021-10-14T17:57:39.234Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:58:32.532Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:58:34.105Z' }
{ message: 
   { '{name': 'name,',
     password: 'password,',
     email: 'email,',
     mobile: '98098}' },
  level: 'info',
  timestamp: '2021-10-14T17:58:34.107Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:58:46.914Z' }
{ message: 
   { '{"name"': '"name",',
     password: 'password,',
     email: 'email,',
     mobile: '98098}' },
  level: 'info',
  timestamp: '2021-10-14T17:58:46.916Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:58:54.230Z' }
{ message: 
   { '{"name"': '"name",',
     password: 'password,',
     email: 'email,',
     mobile: '98098}' },
  level: 'info',
  timestamp: '2021-10-14T17:58:54.232Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:59:26.650Z' }
{ message: 
   { '{"name"': '"name2",',
     password: 'password,',
     email: 'email,',
     mobile: '98098}' },
  level: 'info',
  timestamp: '2021-10-14T17:59:26.652Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T17:59:34.635Z' }
{ message: 
   { '{"name"': '"name2",',
     password: 'password,',
     email: 'email2,',
     mobile: '980982}' },
  level: 'info',
  timestamp: '2021-10-14T17:59:34.637Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T17:59:58.515Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:00:01.775Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-14T18:00:01.777Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:03:52.527Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:03:56.996Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-14T18:03:56.999Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:08:13.200Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:09:37.520Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-14T18:09:37.521Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:09:46.305Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-14T18:09:46.308Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:10:12.008Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:10:16.904Z' }
{ message: 
   IncomingMessage {
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 5783,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 73,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 73 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 5783,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 73,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 73 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers: 
      { 'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.28.4',
        accept: '*/*',
        'cache-control': 'no-cache',
        'postman-token': '9309b3c3-c16a-44e5-9ba3-527ebb18debd',
        host: '65.1.59.3:8080',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '76' },
     rawHeaders: 
      [ 'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.28.4',
        'Accept',
        '*/*',
        'Cache-Control',
        'no-cache',
        'Postman-Token',
        '9309b3c3-c16a-44e5-9ba3-527ebb18debd',
        'Host',
        '65.1.59.3:8080',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '76' ],
     trailers: {},
     rawTrailers: [],
     upgrade: false,
     url: '/register',
     method: 'POST',
     statusCode: null,
     statusMessage: null,
     client: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: bound onceWrapper] listener: [Function: onend] },
              [Function: bound socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close: 
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: 
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [EventEmitter: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/ubuntu/Backend/Node/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: {},
                                 path: '/register',
                                 keys: [],
                                 regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/register',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/login',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: {},
                         path: '/api',
                         keys: [],
                         regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: 
                          { [Function: router]
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: 
                             [ Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/fetch',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'get' } ],
                                    methods: { get: true } } },
                               Layer {
                                 handle: [Function: bound dispatch],
                                 name: 'bound dispatch',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                 route: 
                                  Route {
                                    path: '/update',
                                    stack: 
                                     [ Layer {
                                         handle: [Function: urlencodedParser],
                                         name: 'urlencodedParser',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' },
                                       Layer {
                                         handle: [Function],
                                         name: '<anonymous>',
                                         params: undefined,
                                         path: undefined,
                                         keys: [],
                                         regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                         method: 'post' } ],
                                    methods: { post: true } } } ] },
                         name: 'router',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::8080',
           [Symbol(asyncId)]: 21 },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 5783,
        _destroyed: false,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: bound resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular],
           connection: [Circular],
           _header: null,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular],
           locals: {},
           [Symbol(outHeadersKey)]: 
            { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
              'content-type': [ 'Content-Type', 'application/json' ] } },
        [Symbol(asyncId)]: 73,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 73 },
     _consuming: true,
     _dumped: false,
     next: [Function: next],
     baseUrl: '/api',
     originalUrl: '/api/register',
     _parsedUrl: 
      Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/register',
        path: '/register',
        href: '/register',
        _raw: '/register' },
     params: {},
     query: {},
     res: 
      ServerResponse {
        domain: null,
        _events: { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: bound onceWrapper] listener: [Function: onend] },
                 [Function: bound socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: 
               [ [Function: bound socketOnClose],
                 [Function: onServerResponseClose] ],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: 
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/register',
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/api',
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/register',
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/api',
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _idleTimeout: 120000,
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idleStart: 5783,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: [Circular],
           [Symbol(asyncId)]: 73,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 75,
           [Symbol(triggerAsyncId)]: 73 },
        connection: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              reading: true,
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0,
              _consumed: true },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: bound onceWrapper] listener: [Function: onend] },
                 [Function: bound socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: 
               [ [Function: bound socketOnClose],
                 [Function: onServerResponseClose] ],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 10,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: 
               { next: null,
                 entry: null,
                 finish: [Function: bound onCorkedFinish] } },
           writable: true,
           allowHalfOpen: true,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/register',
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/api',
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _server: 
            Server {
              domain: null,
              _events: 
               { request: 
                  { [EventEmitter: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/ubuntu/Backend/Node/views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: generateETag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/home/ubuntu/Backend/Node/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                            route: 
                             Route {
                               path: '/',
                               stack: 
                                [ Layer {
                                    handle: [Function],
                                    name: '<anonymous>',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                    method: 'get' } ],
                               methods: { get: true } } },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: {},
                                    path: '/register',
                                    keys: [],
                                    regexp: { /^\/register\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/register',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/login\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/login',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: {},
                            path: '/api',
                            keys: [],
                            regexp: { /^\/api\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: 
                             { [Function: router]
                               params: {},
                               _params: [],
                               caseSensitive: undefined,
                               mergeParams: undefined,
                               strict: undefined,
                               stack: 
                                [ Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/fetch\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/fetch',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'get' } ],
                                       methods: { get: true } } },
                                  Layer {
                                    handle: [Function: bound dispatch],
                                    name: 'bound dispatch',
                                    params: undefined,
                                    path: undefined,
                                    keys: [],
                                    regexp: { /^\/update\/?$/i fast_star: false, fast_slash: false },
                                    route: 
                                     Route {
                                       path: '/update',
                                       stack: 
                                        [ Layer {
                                            handle: [Function: urlencodedParser],
                                            name: 'urlencodedParser',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' },
                                          Layer {
                                            handle: [Function],
                                            name: '<anonymous>',
                                            params: undefined,
                                            path: undefined,
                                            keys: [],
                                            regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                            method: 'post' } ],
                                       methods: { post: true } } } ] },
                            name: 'router',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/profile\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 connection: [Function: connectionListener] },
              _eventsCount: 2,
              _maxListeners: undefined,
              _connections: 1,
              _handle: 
               TCP {
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              _pendingResponseData: 0,
              maxHeadersCount: null,
              _connectionKey: '6::::8080',
              [Symbol(asyncId)]: 21 },
           _idleTimeout: 120000,
           _idleNext: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idlePrev: 
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
              _unrefed: true,
              msecs: 120000,
              nextTick: false },
           _idleStart: 5783,
           _destroyed: false,
           parser: 
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              _consumed: true,
              socket: [Circular],
              incoming: [Circular],
              outgoing: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: bound parserOnIncoming] },
           on: [Function: socketOnWrap],
           _paused: false,
           read: [Function],
           _consuming: true,
           _httpMessage: [Circular],
           [Symbol(asyncId)]: 73,
           [Symbol(bytesRead)]: 0,
           [Symbol(asyncId)]: 75,
           [Symbol(triggerAsyncId)]: 73 },
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: 
         { 'x-powered-by': [ 'X-Powered-By', 'Express' ],
           'content-type': [ 'Content-Type', 'application/json' ] } },
     body: 
      { name: 'name',
        password: 'password',
        email: 'email',
        mobile: '98098' },
     _body: true,
     length: undefined,
     read: [Function],
     route: 
      Route {
        path: '/register',
        stack: 
         [ Layer {
             handle: [Function: urlencodedParser],
             name: 'urlencodedParser',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: { /^\/?$/i fast_star: false, fast_slash: false },
             method: 'post' },
           Layer {
             handle: [Function],
             name: '<anonymous>',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: { /^\/?$/i fast_star: false, fast_slash: false },
             method: 'post' } ],
        methods: { post: true } } },
  level: 'info',
  timestamp: '2021-10-14T18:10:16.905Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:10:43.049Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:10:47.360Z' }
{ message: 'name',
  level: 'info',
  timestamp: '2021-10-14T18:10:47.362Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:14:43.146Z' }
{ message: 'connected to DB',
  level: 'info',
  timestamp: '2021-10-14T18:15:11.408Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T18:15:18.065Z' }
{ message: 'user Already Exists ',
  level: 'info',
  timestamp: '2021-10-14T18:15:37.860Z' }
{ message: 'name2',
  level: 'info',
  timestamp: '2021-10-14T18:15:37.862Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T19:34:13.682Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T20:03:01.409Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T20:44:13.965Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T20:59:30.584Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T21:05:06.755Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T21:24:31.672Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T21:54:19.116Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T22:58:45.458Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-14T22:58:46.042Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T00:04:18.339Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T01:40:38.682Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:16:02.245Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:18:16.870Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:18:18.227Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:21:01.316Z' }
{ message: Format { options: {}, Format: [Function: Format] },
  level: 'info',
  timestamp: '2021-10-15T02:35:55.181Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:35:55.188Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-15T02:39:06.305Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:39:06.311Z' }
{ message: {},
  level: 'info',
  timestamp: '2021-10-15T02:44:12.361Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:44:12.368Z' }
{ message: {},
  level: 'info',
  timestamp: '2021-10-15T02:46:24.355Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:46:24.362Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:49:24.356Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T02:49:27.997Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:01:25.076Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:03:15.593Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:03:55.658Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:07:20.665Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:09:06.612Z' }
{ message: undefined,
  level: 'info',
  timestamp: '2021-10-15T03:09:06.615Z' }
{ message: 'Test call to Backend Server',
  level: 'info',
  timestamp: '2021-10-15T03:09:37.607Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:09:37.610Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:13:06.577Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:15:05.769Z' }
{ message: 'login succesful',
  level: 'info',
  timestamp: '2021-10-15T03:15:41.477Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:15:41.484Z' }
{ message: 
   { LESSOPEN: '| /usr/bin/lesspipe %s',
     npm_config_cache_lock_stale: '60000',
     npm_package_dependencies_fs: '0.0.1-security',
     npm_config_legacy_bundling: '',
     npm_config_sign_git_tag: '',
     MAIL: '/var/mail/ubuntu',
     USER: 'ubuntu',
     SSH_CLIENT: '117.207.251.222 2077 22',
     npm_config_user_agent: 'npm/3.5.2 node/v8.10.0 linux x64',
     npm_config_always_auth: '',
     npm_config_bin_links: 'true',
     npm_config_key: '',
     npm_config_description: 'true',
     npm_config_fetch_retries: '2',
     npm_config_heading: 'npm',
     npm_config_if_present: '',
     npm_config_init_version: '1.0.0',
     npm_config_user: '',
     npm_node_execpath: '/usr/bin/node',
     SHLVL: '1',
     HOME: '/home/ubuntu',
     OLDPWD: '/home/ubuntu/Backend/Node/Log',
     npm_config_force: '',
     SSH_TTY: '/dev/pts/1',
     npm_config_only: '',
     npm_config_cache_min: '10',
     npm_config_init_license: 'ISC',
     npm_config_editor: 'vi',
     npm_config_rollback: 'true',
     npm_config_tag_version_prefix: 'v',
     npm_config_cache_max: 'Infinity',
     npm_config_userconfig: '/home/ubuntu/.npmrc',
     npm_package_dependencies_dotenv: '^10.0.0',
     npm_config_engine_strict: '',
     npm_config_init_author_name: '',
     npm_config_init_author_url: '',
     npm_config_tmp: '/tmp',
     npm_package_description: '',
     npm_config_depth: 'Infinity',
     npm_config_save_dev: '',
     npm_config_usage: '',
     npm_config_package_lock: 'true',
     npm_config_cafile: '',
     npm_config_progress: 'true',
     npm_config_https_proxy: '',
     npm_config_onload_script: '',
     LOGNAME: 'ubuntu',
     npm_config_rebuild_bundle: 'true',
     npm_config_save_bundle: '',
     npm_config_shell: '/bin/bash',
     _: '/usr/bin/npm',
     npm_package_dependencies_express: '^4.17.1',
     npm_config_prefix: '/usr/local',
     npm_config_dry_run: '',
     npm_config_browser: '',
     npm_config_cache_lock_wait: '10000',
     npm_config_registry: 'https://registry.npmjs.org/',
     npm_config_save_optional: '',
     npm_config_scope: '',
     npm_config_searchopts: '',
     npm_config_versions: '',
     XDG_SESSION_ID: '611',
     TERM: 'xterm',
     npm_config_cache: '/home/ubuntu/.npm',
     npm_config_proxy: '',
     npm_package_scripts_start: 'nodemon server.js',
     npm_config_global_style: '',
     npm_config_ignore_scripts: '',
     npm_config_searchsort: 'name',
     npm_config_version: '',
     npm_config_local_address: '',
     npm_config_viewer: 'man',
     PATH: '/usr/share/npm/bin/node-gyp-bin:/home/ubuntu/Backend/Node/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
     npm_package_name: 'Node',
     NODE: '/usr/bin/node',
     XDG_RUNTIME_DIR: '/run/user/1000',
     npm_config_color: 'true',
     DISPLAY: 'localhost:11.0',
     npm_config_fetch_retry_mintimeout: '10000',
     LANG: 'C.UTF-8',
     npm_config_umask: '0002',
     LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
     npm_package_main: 'server.js',
     npm_config_fetch_retry_maxtimeout: '60000',
     npm_config_loglevel: 'warn',
     npm_config_message: '%s',
     npm_lifecycle_script: 'nodemon server.js',
     npm_package_scripts_test: 'echo "Error: no test specified" && exit 1',
     npm_config_ca: '',
     npm_config_cert: '',
     npm_config_global: '',
     npm_config_link: '',
     SHELL: '/bin/bash',
     npm_package_version: '1.0.0',
     npm_config_access: '',
     npm_config_also: '',
     npm_config_save: '',
     npm_config_unicode: 'true',
     npm_lifecycle_event: 'start',
     npm_config_argv: '{"remain":[],"cooked":["start"],"original":["start"]}',
     npm_config_long: '',
     npm_config_production: '',
     npm_config_unsafe_perm: 'true',
     LESSCLOSE: '/usr/bin/lesspipe %s %s',
     npm_package_author: '',
     npm_package_dependencies_nodemon: '^2.0.12',
     npm_config_node_version: '8.10.0',
     npm_config_tag: 'latest',
     npm_config_git_tag_version: 'true',
     npm_config_shrinkwrap: 'true',
     npm_package_license: 'ISC',
     npm_package_dependencies_mongoose: '^5.13.7',
     npm_config_fetch_retry_factor: '10',
     npm_config_npat: '',
     npm_config_proprietary_attribs: 'true',
     npm_config_save_exact: '',
     npm_config_strict_ssl: 'true',
     npm_config_globalconfig: '/etc/npmrc',
     npm_config_dev: '',
     npm_config_init_module: '/home/ubuntu/.npm-init.js',
     npm_config_parseable: '',
     PWD: '/home/ubuntu/Backend/Node',
     npm_config_globalignorefile: '/etc/npmignore',
     npm_execpath: '/usr/share/npm/bin/npm-cli.js',
     SSH_CONNECTION: '117.207.251.222 2077 172.31.3.245 22',
     XDG_DATA_DIRS: '/usr/local/share:/usr/share:/var/lib/snapd/desktop',
     npm_config_cache_lock_retries: '10',
     npm_config_save_prefix: '^',
     npm_config_group: '1000',
     npm_config_init_author_email: '',
     npm_config_searchexclude: '',
     npm_config_git: 'git',
     npm_config_optional: 'true',
     npm_config_json: '',
     DB_USER: 'admin',
     DB_URI: 'mongodb://localhost:27017/',
     TOKEN_KEY: 'longStringRandomKey' },
  level: 'info',
  timestamp: '2021-10-15T03:19:15.099Z' }
{ level: 'error',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T03:21:13.400Z' }
{ level: 'error',
  label: 'label_test',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T03:21:49.109Z' }
{ level: 'error',
  label: 'label_test',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T06:01:56.310Z' }
{ level: 'error',
  label: 'label_test',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T06:04:07.472Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:06:03.486Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:11:31.394Z' }
{ message: 'name2',
  level: 'info',
  timestamp: '2021-10-15T07:11:31.397Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:14:06.221Z' }
{ level: 'info',
  label: 'signup.js',
  messgae: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message2: 'new user signup requested',
  timestamp: '2021-10-15T07:27:51.872Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:27:52.031Z' }
{ message: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-15T07:27:52.033Z' }
{ level: 'info',
  label: 'signup.js',
  messgae: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message2: 'new user signup requested',
  timestamp: '2021-10-15T07:28:26.258Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:28:26.378Z' }
{ message: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-15T07:28:26.380Z' }
{ level: 'info',
  label: 'signup.js',
  request_body: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  message: 'new user signup requested',
  timestamp: '2021-10-15T07:29:02.943Z' }
{ level: 'info',
  label: 'Authenticate.js/register',
  messgae: 'User Already Exists!',
  timestamp: '2021-10-15T07:29:03.101Z' }
{ message: 
   { name: 'name2',
     password: 'password',
     email: 'email2',
     mobile: '980982' },
  level: 'info',
  timestamp: '2021-10-15T07:29:03.102Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-15T07:30:44.800Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-15T07:30:44.953Z' }
{ level: 'info',
  label: 'routes/signup.js/login',
  request_body: { name: 'name', password: 'password' },
  message: 'User Login request',
  timestamp: '2021-10-15T07:30:58.012Z' }
{ level: 'info',
  label: 'Authenticate.js/login',
  messgae: 'Login Succesful',
  timestamp: '2021-10-15T07:30:58.132Z' }
{ level: 'info',
  label: 'server.js',
  messgae: 'Test call to Backend Server',
  timestamp: '2021-10-15T07:34:57.892Z' }
{ level: 'info',
  label: 'routes/profile.js/fetch',
  user: 'name',
  messgae: 'token verified, fetching profile',
  timestamp: '2021-10-15T07:35:52.584Z' }
